#!/usr/bin/env bash

### makes that the script fails if a step fails
set -e

os_type="$(uname -s)"

case "${os_type}" in
    Linux*)
        os_type="Linux"
        if [ -f "/etc/debian_version" ]; then
            sudo apt update
            sudo apt install -y git ninja-build gettext cmake unzip curl build-essential zsh fd-find tmux fzf grep ripgrep mysql-server mysql-client sqlite3 jq python3
            if ! command -v nvim &> /dev/null;
            then
                git clone --depth 1 --single-branch --branch v0.10.3 https://github.com/neovim/neovim.git ~/build/neovim && cd ~/build/neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo && cd build && cpack -G DEB && sudo dpkg -i nvim-linux64.deb && cd ../.. && rm -rf neovim && nvim --headless \"+Lazy! sync\" +qa;
            fi

            if ! command -v "php" >/dev/null 2>&1; then
                read -p "Do you want to install php? (y/n): " user_input
                if [[ "$user_input" == "y" ]]; then
                    sudo add-apt-repository ppa:ondrej/php
                    sudo apt install -y php8.2 php8.2-zip php8.2-curl php8.2-gd php8.2-xml php8.2-sqlite3 php8.2-mysql php8.2-mbstring php8.2-xdebug php7.4 php7.4-zip php7.4-curl php7.4-gd php7.4-xml php7.4-sqlite3 php7.4-mysql php7.4-mbstring php7.4-xdebug
                fi
            fi

        elif grep -q '^ID=arch' /etc/os-release; then
            sudo pacman -S --needed - < /etc/pkglist.txt
            nvim --headless \"+Lazy! sync\" +qa;
        fi

        ;;
esac

if [ ! -f ~/tmux-sessions.json ]; then
    cp ~/.dotfiles/tmux/tmux-sessions.example.json ~/tmux-sessions.json
fi

if [ ! -f ~/.local/share/nvim/databases/telescope_history.sqlite3 ]; then
    mkdir -p ~/.local/share/nvim/databases && touch ~/.local/share/nvim/databases/telescope_history.sqlite3
fi

if [ ! -d "$HOME/.nvm" ]; then
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash && export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh" && [ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion" && nvm install v20.18.0;
fi

if [ ! -d "$HOME/.oh-my-zsh" ]; then
    (sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)")
    echo "Oh My Zsh installation completed (in a subshell). Continuing with the script..."
fi

./install_dotbot || true

read -rep $'Do you want to do the symlinks for the root user?(y)' y

case "${y}" in
    [Yy]*)
        sudo ./install_dotbot || true
        ;;
esac

