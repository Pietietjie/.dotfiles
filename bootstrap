#!/usr/bin/env bash

### makes that the script fails if a step fails
set -e

os_type="$(uname -s)"

case "${os_type}" in
    Linux*)
        os_type="Linux"
        if [   -f "/etc/debian_version" ]; then
            sudo apt update
            sudo apt install -y git python3
        elif grep -q '^ID=arch' /etc/os-release; then
            sudo pacman -Sy --noconfirm tmux neovim git fd fzf jq sqlite ripgrep firefox ttf-firacode-nerd noto-fonts-emoji unzip zsh alacritty man-db keepassxc
            zsh
            nvim --headless \"+Lazy! sync\" +qa;

            if ! grep -q "^$(which zsh)$" /etc/shells; then
              sudo sh -c 'which zsh >> /etc/shells'
            fi
            echo "Changing shell to zsh for all normal users..."
            for user in $(awk -F: '$3 >= 1000 && $3 < 65534 {print $1}' /etc/passwd); do
              echo "Changing shell for $user"
              sudo chsh -s $(which zsh) "$user"
            done
            if [ -f /etc/default/useradd ]; then
              sudo sed -i "s/^SHELL=.*/SHELL=$(which zsh | sed -i 's/\//\\\//g')" /etc/default/useradd
            else
              sudo echo "SHELL=$(which zsh)" >> /etc/default/useradd
            fi
            echo "Default shell changed to zsh for all users"

            if [ ! -d \"$HOME/.oh-my-zsh\" ] && $(which zsh);
            then
                sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"
                autoload -U zsh-newuser-install
                zsh-newuser-install -f
            fi

            mkdir -p ~/.local/share/nvim/databases && touch ~/.local/share/nvim/databases/telescope_history.sqlite3

            if [ ! -d "$HOME/.nvm" ];
            then
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash && export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh" && [ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion" && nvm install v20.18.0;
            fi
        fi

        ;;
esac

###############################################################################
# Clone dotfiles
###############################################################################
read -p "Do you want to clone the git repo (if you run the command via curl)? (y/n): " user_input

if [[ "$user_input" == "y" ]]; then
    read -rep $'\nWhere do you want to clone these dotfiles to [~/.dotfiles]? ' clone_path
    clone_path="${clone_path:-"${HOME}/.dotfiles"}"

    # Ensure path doesn't exist.
    while [ -e "${clone_path}" ]; do
        read -rep $'\nPath exists, try again? (y) ' y
        case "${y}" in
            [Yy]*)

                break;;
            *) echo "Please answer y or CTRL+c the script to abort everything";;
        esac
    done

    # This is used to locally develop the install script.
    git clone https://github.com/Pietietjie/.dotfiles "${clone_path}"

    cd ${clone_path}

    git submodule init && git submodule update

    git remote remove origin && git remote add origin git@github.com:Pietietjie/.dotfiles.git

else
  echo "Assuming that your are in the git dir"
fi

###############################################################################
# Detect OS and distro type
###############################################################################

case "${os_type}" in
    Linux*)
        os_type="Linux"

        ./install || true

        if [ -f "/etc/debian_version" ]; then
            sudo ./install || true
            sudo add-apt-repository ppa:ondrej/php
            sudo apt update
            sudo apt install -y git ninja-build gettext cmake unzip curl build-essential zsh fd-find tmux fzf grep ripgrep mysql-server mysql-client sqlite3 jq

            read -p "Do you want to install php? (y/n): " user_input
            if [[ "$user_input" == "y" ]]; then
                sudo apt install -y php8.2 php8.2-zip php8.2-curl php8.2-gd php8.2-xml php8.2-sqlite3 php8.2-mysql php8.2-mbstring php8.2-xdebug php7.4 php7.4-zip php7.4-curl php7.4-gd php7.4-xml php7.4-sqlite3 php7.4-mysql php7.4-mbstring php7.4-xdebug
            fi

            if ! command -v nvim &> /dev/null;
            then
                git clone --depth 1 --single-branch --branch v0.10.3 https://github.com/neovim/neovim.git ~/build/neovim && \
                cd ~/build/neovim && \
                make CMAKE_BUILD_TYPE=RelWithDebInfo && \
                cd build && \
                cpack -G DEB && \
                sudo dpkg -i nvim-linux64.deb && \
                cd ../.. && \
                rm -rf neovim && \
                nvim --headless \"+Lazy! sync\" +qa;
            fi
        elif grep -q '^ID=arch' /etc/os-release; then
            nvim --headless \"+Lazy! sync\" +qa;
        fi

        ;;
esac

cat << EOF
Everything was installed successfully!

You can safely close this terminal.
EOF

read -p "Restart to apply all settings? (y/n): " restart_input

if [[ "$restart_input" == "y" ]]; then
    sudo reboot
fi

exit 0
